class COLUMN_TYPE:
    IGNORE = 0
    INPUT = 1
    TARGET = 2

class ALGORITHM:
    LINEAR_REGRESSION = 1
    LOGISTIC_REGRESSION = 2
    LINEAR_DISCRIMINANT_ANALYSIS = 3
    DECISION_TREE = 4
    GAUSSIAN_NAIVE_BAYES = 5
    RANDOM_FOREST_CLASSIFIER = 6
    RANDOM_FOREST_REGRESSOR = 7
    K_NEAREST_NEIGHBORS_CLASSIFIER = 8
    K_NEAREST_NEIGHBORS_REGRESSOR = 9
    SUPPORT_VECTOR_MACHINE_CLASSIFIER = 10
    SUPPORT_VECTOR_MACHINE_REGRESSOR = 11
    NEAREST_CENTROID = 12


ALGORITHM_NAME_MAP = {
    str(ALGORITHM.LINEAR_REGRESSION): 'Linear Regression',
    str(ALGORITHM.LOGISTIC_REGRESSION): 'Logistic Regression',
    str(ALGORITHM.LINEAR_DISCRIMINANT_ANALYSIS): 'Linear Discriminant Analysis',
    str(ALGORITHM.DECISION_TREE): 'Decision Tree',
    str(ALGORITHM.GAUSSIAN_NAIVE_BAYES): 'Gaussian Naive Bayes',
    str(ALGORITHM.RANDOM_FOREST_CLASSIFIER): 'Random Forest Classifier',
    str(ALGORITHM.K_NEAREST_NEIGHBORS_CLASSIFIER): 'K Nearest Neighbors Classifier',
    str(ALGORITHM.K_NEAREST_NEIGHBORS_REGRESSOR): 'K Nearest Neighbors Regressor',
    str(ALGORITHM.SUPPORT_VECTOR_MACHINE_CLASSIFIER): 'Support Vector Machine Classifier',
    str(ALGORITHM.SUPPORT_VECTOR_MACHINE_REGRESSOR): 'Support Vector Machine Regressor',
    str(ALGORITHM.NEAREST_CENTROID): 'Nearest Centroid',
    str(ALGORITHM.RANDOM_FOREST_REGRESSOR): 'Random Forest Regressor',
}

ALGORITHM_PARAM_MAP = {
    str(ALGORITHM.LINEAR_REGRESSION): ['lr_normalize', 'lr_fit_intercept'],
    str(ALGORITHM.LOGISTIC_REGRESSION): [],
    str(ALGORITHM.LINEAR_DISCRIMINANT_ANALYSIS): [],
    str(ALGORITHM.DECISION_TREE): [],
    str(ALGORITHM.GAUSSIAN_NAIVE_BAYES): [],
    str(ALGORITHM.RANDOM_FOREST_CLASSIFIER): [],
    str(ALGORITHM.K_NEAREST_NEIGHBORS_CLASSIFIER): [],
    str(ALGORITHM.K_NEAREST_NEIGHBORS_REGRESSOR): [],
    str(ALGORITHM.SUPPORT_VECTOR_MACHINE_CLASSIFIER): [],
    str(ALGORITHM.SUPPORT_VECTOR_MACHINE_REGRESSOR): [],
    str(ALGORITHM.NEAREST_CENTROID): [],
    str(ALGORITHM.RANDOM_FOREST_REGRESSOR): [],
}
